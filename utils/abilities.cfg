#textdomain wesnoth-The_Revenge

# ======================================================================================================================
# Weapon special - Knockout

#define WEAPON_SPECIAL_KNOCKOUT
  # Actually, this simply petrifies a given unit.
  [petrifies]
    id = knockout
    name = _ "Knockout"
    {WEAPON_SPECIAL_DESCRIPTION_KNOCKOUT}
    active_on = offense
  [/petrifies]
  [chance_to_hit]
    value = 30
  [/chance_to_hit]
#enddef


# ======================================================================================================================
# Weapon special - Freeze

#define WEAPON_SPECIAL_FREEZE
  # todo
  # Die Fähigkeit "friert" Gegner ein und reduziert die maximalen Bewegungspunkte um 1, jedes mal wenn man einen Treffer
  # landet
  # Zusätzlich zum "verlangsamen"
  [dummy]
    id = freeze
    name = _ "Freeze"
    {WEAPON_SPECIAL_DESCRIPTION_FREEZE}
  [/dummy]
#enddef

# ======================================================================================================================
# Ability - Resurrection

#define ABILITY_RESURRECT
  # Units with this ability will have an additional menu option for resurrecting (enemy) dead bodies
  # When resurrecting, the player will be offered a menu to select which unit he wants to create / resurrect
  # The unit with this ability must be located on top of a placed dead body
  [dummy]
    id = resurrect
    name = _ "Resurrect"
    {ABILITY_DESCRIPTION_RESURRECT}
  [/dummy]
#enddef

#define EVENT_RESURRECT
  # Place a corpse when a living (not undead) unit dies
  # If there is no corpse on the units hex, he won't be offered the selection menu
  [event]
    id = resurrect_create
    name = die
    first_time_only = no
    [filter]
      [not]
        race = undead
      [/not]
    [/filter]
    # Variable where all corpse locations are stored
    [set_variables]
      name = corpse_locations
      mode = append
      [value]
        location = $x1 $y1
      [/value]
    [/set_variables]
    # Random integer for alternating images
    [set_variable]
      name = rand_tmp
      rand = 1..4
    [/set_variable]
    {PLACE_IMAGE "scenery/leftovers-$rand_tmp|.png" $x1 $y1}
    {CLEAR_VARIABLE rand_tmp}
    # Create string with the stored locations, going to be used in the [set_menu_item]
    [set_variable]
      name = resurrect_conditional
      [join]
        variable = corpse_locations
        key = location
        separator = ";"
        remove_empty = yes
      [/join]
    [/set_variable]
  [/event]
#enddef

#define RESURRECT_SELECTION_UNIT TYPE COST LABEL IMAGE
  # Add a unit to the resurrection selection menu, including the case that the player doesn't have enough gold
  [option]
    [show_if]
      [variable]
        name = resurrect_stored_side.gold
        greater_than_equal_to = $({COST} * 2)
      [/variable]
    [/show_if]
    # Player has enough gold
    label = _ "{LABEL} ($({COST} * 2) gold)"
    image = {IMAGE}
    [command]
      [gold]
        side = 1
        amount = -$({COST} * 2)
      [/gold]
      [unit]
        x,y = $x1,$y1
        type = {TYPE}
        side = 1
        animate = yes
      [/unit]
    [/command]
  [/option]
  [option]
    [show_if]
      [variable]
        name = resurrect_stored_side.gold
        less_than = $({COST} * 2)
      [/variable]
    [/show_if]
    # Player needs more gold, unit is not affordable
    label = _ "{LABEL} (<span color='red'>$({COST} * 2) gold</span>)"
    image = {IMAGE}
    [command]
      {SPEAK_NARRATOR _"Can't afford Skeleton Archer! You need $($({COST} * 2) - $resurrect_stored_side.gold) more gold!"}
      [break]
      [/break]
    [/command]
  [/option]
#enddef

#define MENU_ITEM_RESURRECT
  # First, the displayed menu for resurrecting will offer a decision, whether the player actually wants to resurrect a
  # unit or not
  # After confirming the option, a selection menu will be displayed, where the player can choose between different units
  [set_menu_item]
    id = resurrect
    {MENU_ITEM_DESCRIPTION_RESURRECT}
    image = "icons/resurrect.png"

    [show_if]
      [have_unit]
        x,y = $x1,$y1
        side = 1
        ability = resurrect
      [/have_unit]
      [and]
        [variable]
          name = resurrect_conditional
          contains = $x1 $y1
        [/variable]
      [/and]
    [/show_if]
    [command]
      # Display different dialogues when resurrecting so that the player is not bored of reading the same all over the time
      [set_variables]
        name = resurrect_option_labels
        [value]
          do = _ "Resurrect the corpse."
          cancel = _ "I should not waste my power on this weak corpse."
        [/value]
        [value]
          do = _ "I need more fighters."
          cancel = _ "My conscience... It knocks on the door..."
        [/value]
        [value]
          do = _ "My army must increase in number!"
          cancel = _ "I better save up my gold!"
        [/value]
        [value]
          do = _ "Shall the death support my army!"
          cancel = _ "Anyone more suggestions for dialogues displayed here?"
        [/value]
      [/set_variables]
      # To allow different combinations of displayed dialogues create 2 random indexes
      # Each index will be responsible for one offered option dialogue
      [set_variable]
        name = resurrect_label_index_do
        rand = 0..$($resurrect_option_labels.length - 1)
      [/set_variable]
      [set_variable]
        name = resurrect_label_index_cancel
        rand = 0..$($resurrect_option_labels.length - 1)
      [/set_variable]
      {VARIABLE corpse_exists no}
      # Check whether corpse located at units position
      # Another security check, keep it!
      [for]
        array = corpse_locations
        [do]
          [if]
            [variable]
              name = corpse_locations[$i].location
              equals = $x1 $y1
            [/variable]
            [then]
              {VARIABLE_OP corpse_exists value yes}
              {VARIABLE corpse_index $i}
            [/then]
          [/if]
        [/do]
      [/for]
      [if]
        [variable]
          name = corpse_exists
          boolean_equals = yes
        [/variable]
        [then]
          # Capable to continue with the process
          [message]
            speaker = unit
            # Create units....
            [option]
              label = $resurrect_option_labels[$resurrect_label_index_do].do
              [command]
                # Store the sides gold in a variable
                # Without checking for the sides current gold, the player would be able to recruit, even if he doesn't have gold
                [store_side]
                  side = 1
                  variable = resurrect_stored_side
                [/store_side]
                # The player confirmed his action
                # Offer a selection menu with different unit types that can be recruited / resurrected or whatever
                # Set the gold price for each unit its regular cost * 2
                [message]
                  speaker = unit
                  {RESURRECT_SELECTION_UNIT (Skeleton Archer) 14 (Skeleton Archer) "units/undead-skeletal/archer/archer.png"}
                  {RESURRECT_SELECTION_UNIT Skeleton 15 Skeleton "units/undead-skeletal/skeleton/skeleton.png"}
                  [option]
                    label = _ "Cancel"
                    [command]
                      [break]
                      [/break]
                    [/command]
                  [/option]
                [/message]
                # This only happens when a unit has been created
                {CLEAR_VARIABLE corpse_locations[$corpse_index]}
                {CLEAR_VARIABLE corpse_index}
                {REMOVE_IMAGE $x1 $y1}
                # Update the conditional variable, as one corpse has been removed
                [set_variable]
                  name = resurrect_conditional
                  [join]
                    variable = corpse_locations
                    key = location
                    separator = ";"
                    remove_empty = yes
                  [/join]
                [/set_variable]
              [/command]
            [/option]
            # Cancel the action
            [option]
              label = $resurrect_option_labels[$resurrect_label_index_cancel].cancel
            [/option]
          [/message]
        [/then]
        # This is an error - No corpse at the second safety check or something else
        # Actually, this should never happen
        [else]
          [message]
            speaker = unit
            message = _ "How am I supposed to summon an undead from the sheol without a corpse next to me?"
          [/message]
        [/else]
      [/if]
      {CLEAR_VARIABLE resurrect_option_labels,resurrect_label_index_do,resurrect_label_index_cancel,resurrect_stored_side}
    [/command]
  [/set_menu_item]
#enddef

# ======================================================================================================================
# Ability - Devour

#define ABILITY_DEVOUR
  # Units with this ability will have an additional menu option for devouring / eating allies
  # When the menu option is selected, the player will be offered a selection menu, listing all nearby units
  # When the player selected one nearby unit, the unit will be sacrificed in order to heal and save the devouring unit
  [dummy]
    id = devour
    name = _ "Devour"
    {ABILITY_DESCRIPTION_DEVOUR}
  [/dummy]
#enddef

#define DEVOUR_SELECTION_UNIT INDEX
  # Add a unit to the devourers selection menu by given index
  [option]
    [show_if]
      [variable]
        name = devour_stored_adjacent_units.length
        greater_than_equal_to = {INDEX}
      [/variable]
    [/show_if]
    label = _ "$devour_stored_adjacent_units[{INDEX}].name"
    image = "$devour_stored_adjacent_units[{INDEX}].image"
    [command]
      [kill]
        id = $devour_stored_adjacent_units[{INDEX}].id
        animate = yes
      [/kill]
      [heal_unit]
        amount = $($devour_stored_adjacent_units[{INDEX}].hitpoints / 5)
        animate = yes
        restore_statuses = no
      [/heal_unit]
      [floating_text]
        x,y = $x1,$y1
        text = "<span color='#f4d742'>" + _ "Devoured" + "</span>"
      [/floating_text]
    [/command]
  [/option]
#enddef

#define MENU_ITEM_DEVOUR
  # Offer a selection menu where the player can choose between all adjacent units which he wants to feed to the devourer
  [set_menu_item]
    id = devour
    {MENU_ITEM_DESCRIPTION_DEVOUR}
    image = "icons/resurrect.png"

    [show_if]
      [have_unit]
        x,y = $x1,$y1
        side = 1
        ability = devour
      [/have_unit]
    [/show_if]
    [command]
      # Store all nearby units (No leaders allowed)
      [store_unit]
        [filter]
          side = 1
          [and]
            canrecruit = no
          [/and]
          [and]
            [filter_adjacent]
              x,y = $x1,$y1
            [/filter_adjacent]
          [/and]
        [/filter]
        variable = devour_stored_adjacent_units
      [/store_unit]
      [message]
        [show_if]
          [variable]
            name = devour_stored_adjacent_units.length
            greater_than = 0
          [/variable]
        [/show_if]
        # There are units able to be devoured / located close to the units hex
        speaker = unit
        message = _ "Who should I eat today?"
        {DEVOUR_SELECTION_UNIT 0}
        {DEVOUR_SELECTION_UNIT 1}
        {DEVOUR_SELECTION_UNIT 2}
        {DEVOUR_SELECTION_UNIT 3}
        {DEVOUR_SELECTION_UNIT 4}
        {DEVOUR_SELECTION_UNIT 5}
        [option]
          label = _ "Cancel"
        [/option]
      [/message]
      [message]
        [show_if]
          [variable]
            name = devour_stored_adjacent_units.length
            equals = 0
          [/variable]
        [/show_if]
        # No units available
        speaker = unit
        message = _ "There's nobody I could take care of..."
      [/message]
      {CLEAR_VARIABLE devour_stored_adjacent_units}
    [/command]
  [/set_menu_item]
#enddef

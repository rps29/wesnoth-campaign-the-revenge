#textdomain wesnoth-The_Revenge

# @doc
# Include an image located at data/add-ons/The_Revenge/images/
# PATH: The path trailing after images/*
#define IMG PATH
  data/add-ons/The_Revenge/images/{PATH}
#enddef

# ======================================================================================================================
# Unit Macros

# @doc
# Generate unit with guardian AI-special
# SIDE: The guardian unit will be created at this side
# X and Y: The gaurdian unit will be created at these coordinates
#define UNIT_GUARDIAN SIDE TYPE X Y
  [unit]
    side = {SIDE}
    type = {TYPE}
    x,y = {X},{Y}
    ai_special = guardian
  [/unit]
#enddef

# @doc
# Providing a [have_unit] check in order to transform a unit.
# Used for main characters (Tedder, Ugoki) at Scenario 1 -> 2 and scenario 2 -> 3
# ID: The id of the unit to be transformed
# NEW_TYPE: The type the unit will be transformed to
#define UNIT_TRANSFORM ID NEW_TYPE
  [if]
    [have_unit]
      id = {ID}
    [/have_unit]
    [then]
      [transform_unit]
        id = {ID}
        transform_to = {NEW_TYPE}
      [/transform_unit]
      [modify_unit]
        [filter]
          id = {ID}
        [/filter]
        hitpoints = $this_unit.max_hitpoints
        moves = $this_unit.max_moves
      [/modify_unit]
    [/then]
  [/if]
#enddef

# ======================================================================================================================
# General, useful stuff

# @doc
# Shortcut for message
# SPEAKER: The ID of the speaker
# MESSAGE: String, message the speaker {SPEAKER} will speak
#define SPEAK SPEAKER MESSAGE
  [message]
    speaker={SPEAKER}
    message={MESSAGE}
  [/message]
#enddef

# @doc
# Shortcut for 'narrator'-messages
# MESSAGE: Check {SPEAK} macro
#define SPEAK_NARRATOR MESSAGE
  [message]
    speaker = narrator
    image = wesnoth-icon.png
    message = {MESSAGE}
  [/message]
#enddef

# @doc
# Call this macro when the scenario is won
#define VICTORY
  [endlevel]
    result = victory
  [/endlevel]
#enddef

# @doc
# Call this macro when the scenario is lost
#define DEFEAT
  [endlevel]
    result = defeat
  [/endlevel]
#enddef

# @doc
# Adds an [objective] to your [objectives] section
# CONDITION: The condition - lose or win
# DESCRIPTION: The description of the objective
#define OBJECTIVE CONDITION DESCRIPTION
  [objective]
    condition = {CONDITION}
    description = {DESCRIPTION}
  [/objective]
#enddef

# @doc
# Adds a [note] to your [objectives] section
# DESCRIPTION: The description of the note
#define OBJ_NOTE DESCRIPTION
  [note]
    blue = 191
    description = {DESCRIPTION}
  [/note]
#enddef

# @doc
# This macro creates an usual castle around given X and Y coordinates. Terrains used are CE surrounding an Ke castle keep for the X and Y coordinates
# X and Y: The coordinates for the keep
#define CREATE_CASTLE X Y
  [store_locations]
    [filter_adjacent_location]
      x,y = {X},{Y}
    [/filter_adjacent_location]
    variable = castle_locations
  [/store_locations]
  {FOREACH castle_locations i}
    [terrain]
      terrain = Ce
      x,y = $castle_locations[$i].x, $castle_locations[$i].y
    [/terrain]
    [terrain]
      terrain = Ke
      x,y = {X},{Y}
    [/terrain]
  {NEXT i}
  {CLEAR_VARIABLE castle_locations}
#enddef

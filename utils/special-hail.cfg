#textdomain wesnoth-Eternal_Silence

# ======================================================================================================================
# todo Move this special to abilities.cfg / descriptions.cfg

# ======================================================================================================================
# I will probably just remove this in a future commit
# ======================================================================================================================

#define WEAPON_SPECIAL_HAIL
  # This weapon special can be used on offense and ranged attacks only.
  [damage]
    id = hail
    name = _ "Hail"
    description = _ "This attack is fired inaccurate but affects a comparatively large area that makes its shots always hit. The salves are fired one by one, giving the enemy no opportunity to strike back the bombardment in time. On the downside, caused by the looseness of taking aim, this offense will vary from 60% up to 120% of the base damage every time it hits.

Active on offense only.
Chance to hit 100%, but damage varying."
    active_on = offense
    [filter_self]
      [filter_weapon]
        range = ranged
      [/filter_weapon]
    [/filter_self]
  [/damage]
  [chance_to_hit]
    value = 100
  [/chance_to_hit]
#enddef

#define EVENT_HAIL
  # This provides the effects intended for the weapon special 'hail'
  [event]
    id = hail_combat
    name = attack
    first_time_only = no
    [filter_attack]
      special = hail
    [/filter_attack]

    # Divide weapon damage by 4, equally with the number of iterations
    # todo Make the attack e.g. 32-1 instead of 8-4, and split its damage here. This will give the player a better understanding of how hail special works.
    {VARIABLE damage_to_deal "$($($weapon.damage*$second_unit.resistance.$weapon.type)/100)"}

    # Variables used in nested events
    {VARIABLE attacker_id $unit.id}
    {VARIABLE defender_id $second_unit.id}
    {VARIABLE weapon_name $weapon.name}
    {VARIABLE weapon_number $weapon.number}

    # Because the entire combat is managed in this event itself, modify the units hail attack hitting 0 times by default
    # This is reverted in the event hail_combat_end
    [modify_unit]
      [filter]
        id = $unit.id
      [/filter]
      [effect]
        apply_to = attack
        name = $weapon.name
        set_attacks = 0
      [/effect]
    [/modify_unit]

    # Iterate the range of weapon attack number
    [for]
      start = 1
      end = $weapon.number
      [do]
        # Break the hail iterations - Otherwise the unit would continue attacking an empty hex after its target died
        # todo If the unit dies being harmed, the attacker doesn't receive any experience - But he definitely must receive XP!
        # When setting `experience = yes` at `[harm_unit]`, the attacker receives XP for each harming strike, which means 4x 1 XP for 4 attacks. Also some weird XP behaviour when enemy is killed
        [event]
          id = hail_killed
          name = die
          [filter]
            id = $defender_id
          [/filter]
          {CLEAR_VARIABLE defender_id}
          [break]
          [/break]
        [/event]

        # Reset the units hail attack number
        [event]
          id = hail_combat_end
          name = attack end
          [modify_unit]
            [filter]
              id = $attacker_id
            [/filter]
            [effect]
              apply_to = attack
              name = $weapon_name
              set_attacks = $weapon_number
            [/effect]
          [/modify_unit]
          {CLEAR_VARIABLE attacker_id,weapon_name,weapon_number}
        [/event]

        # todo Include the units alignment (chaotic, neutral, lawful) in damage calculation!
        # $weapon.type deals the defenders resistance % of $weapon.damage, which is calculated as $damage_to_deal
        [set_variable]
          name = random_multiplier
          # Order of defined multipliers is important - Change for balancing only!
          rand = "110,80,120,60,130,50,100"
        [/set_variable]
        {VARIABLE_OP damage_to_deal multiply $random_multiplier}
        {VARIABLE_OP damage_to_deal divide 100}

        # Animate the unit attacking
        [animate_unit]
          flag = attack
          [filter]
            id = $unit.id
          [/filter]
          [filter_second]
            id = $second_unit.id
          [/filter_second]
          [primary_attack]
            name = $weapon.name
          [/primary_attack]
          [secondary_attack]
            range = $weapon.range
          [/secondary_attack]
          hits = yes
          [animate]
            flag = defend
            [filter]
              id = $second_unit.id
            [/filter]
            [primary_attack]
              range = $weapon.range
            [/primary_attack]
          [/animate]
        [/animate_unit]

        # Actually hit the enemy by the calculated amount
        # todo Neither HP nor EP bars are displayed when harming and the dying animation looks ugly and not smooth
        [harm_unit]
          [filter]
            x,y = $x2,$y2
          [/filter]
          [filter_second]
            x,y = $x1,$y1
          [/filter_second]
          amount = $damage_to_deal
          damage_type = $weapon.type
          experience = no
          fire_event = yes
          [primary_attack]
            range = $weapon.range
          [/primary_attack]
          [secondary_attack]
            name = $weapon.name
          [/secondary_attack]
        [/harm_unit]
        {CLEAR_VARIABLE random_multiplier}
      [/do]
    [/for]

    # Clear up. Do not remove the 'hail_combat_end' event!
    [remove_event]
      id = hail_killed
    [/remove_event]
    {CLEAR_VARIABLE defender_id,damage_to_deal,random_multiplier}
  [/event]
#enddef

#define SPECIAL_NOTES_HAIL
  # Special notes for the weapon special 'hail'
  _ " Using a hailing attack offensively will give the enemy no opportunity to strike back the bombardment in time. On the downside, caused by the looseness of taking aim, this offenses damage will vary every time it hits."
#enddef
